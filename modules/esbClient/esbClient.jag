<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var log = new Log("module/esbClient/esbClient.jag");
var modManager = jagg.module("manager");
var site = require("/site/conf/site.json");

var deployCarbonApplication = function (uploadedFileName, uploadedFilePath) {
    log.info("Started deploying carbon app => name : " + uploadedFileName + " file path : " + uploadedFilePath);

    var tenantDomain = modManager.getTenantDomain();

    var cAppUploaderUrl = site.esb.serverBaseURL + "t/" + tenantDomain + "/services/" + CAPP_DEPLOYER_SERVICE + "/";


    // ======= DEPLOY CAPP ========
    var stub = new org.wso2.carbon.application.mgt.stub.upload.CarbonAppUploaderStub(cAppUploaderUrl);
    var client = stub._getServiceClient();
    var client_options = client.getOptions();
    client_options.setManageSession(true);
    client_options.setProperty(org.apache.axis2.transport.http.HTTPConstants.COOKIE_STRING, session.get("esb-auth-cookie"));

    var cappFile = new java.io.File(uploadedFilePath);
    var byteArray = org.apache.commons.io.FileUtils.readFileToByteArray(cappFile);
    var dataHandler = new javax.activation.DataHandler(byteArray, "application/octet-stream");
    var fileItemsArr = java.lang.reflect.Array.newInstance(
                           org.wso2.carbon.application.mgt.stub.upload.types.carbon.UploadedFileItem, 1);
    var fileItem = new org.wso2.carbon.application.mgt.stub.upload.types.carbon.UploadedFileItem();
    fileItem.setDataHandler(dataHandler);
    fileItem.setFileName(uploadedFileName);
    fileItem.setFileType("jar");

    fileItemsArr[0] = fileItem;

    stub.uploadApp(fileItemsArr);

    // ======= WAIT FOR CAPP DEPLOYMENT ========

    log.info("Waiting " + CAPP_DEPLOYMENT_MAX_WAIT_TIME + " milliseconds for carbon application deployment : " + uploadedFileName);

    var isCarFileDeployed = false;

    var currentWaitTime = 0;

    while (currentWaitTime < CAPP_DEPLOYMENT_MAX_WAIT_TIME) {
        var carbonAppExists = isCarbonAppExists(uploadedFileName);

            if (carbonAppExists) {
                log.info("Carbon application is deployed in " + currentWaitTime + " milliseconds");
                isCarFileDeployed = true;
                break;
            }

            java.lang.Thread.sleep(1000);
            currentWaitTime = currentWaitTime + 1000;
        }

    if (isCarFileDeployed) {
        log.info("Carbon application deployed successfully");
    } else {
        log.warn("Carbon application deployment failed");
    }
};


var isCarbonAppExists = function (carbonApplicationName) {

    if (carbonApplicationName.match(".car" + "$") == ".car") { //carfile name ends with .car
        carbonApplicationName = carbonApplicationName.substring(0, carbonApplicationName.length - 4);
    }
    var appAdminUrl = site.esb.serverBaseURL + "t/" + tenantDomain + "/services/" + APP_ADMIN_SERVICE + "/";

    var stub = new org.wso2.carbon.application.mgt.stub.ApplicationAdminStub(appAdminUrl);
    var client = stub._getServiceClient();
    var client_options = client.getOptions();
    client_options.setManageSession(true);
    client_options.setProperty(org.apache.axis2.transport.http.HTTPConstants.COOKIE_STRING, session.get("esb-auth-cookie"));

    var applicationList = stub.listAllApplications();

    log.info(applicationList);

    if (applicationList != null){
         for (i = 0; i < applicationList.length; i++) {
             if (applicationList[i] == carbonApplicationName){
                 log.info("Carbon application " + carbonApplicationName + " exists");
                 return true;
             } else {
                 log.info("Carbon application " + carbonApplicationName + " does not exists");
                 return false;
             }
         }
    }

    return false;
};

var getApiListFromCarbonApplication = function (carbonApplicationName) {

    if (carbonApplicationName.match(".car" + "$") == ".car") { //carfile name ends with .car
        log.info("carbonApplicationName" + carbonApplicationName);
        carbonApplicationName = carbonApplicationName.substring(0, carbonApplicationName.length - 10);
    }

    var restApiAdminUrl = site.esb.serverBaseURL + "t/" + tenantDomain + "/services/" + REST_API_ADMIN_SERVICE + "/";

    var requestPayload = "<xsd:getAPIsForListing xmlns:xsd=\"http://org.apache.axis2/xsd\">"
                          +"  <xsd:pageNumber>0</xsd:pageNumber>"
                          +"  <xsd:itemsPerPage>100</xsd:itemsPerPage>"
                          +"</xsd:getAPIsForListing>";

    var ws = require("ws");
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:getAPIsForListing";
    options["HTTPHeaders"] = [{name: "cookie", value: session.get("esb-auth-cookie")}];

    request.open(options, restApiAdminUrl, false);
    request.send(requestPayload);

    var response = request.responseE4X;

    var apiList = new Array();
    var Api = Packages.org.wso2.intcloud.core.dto.Api;

    var ns = new Namespace("http://org.apache.axis2/xsd");
    var ax2482 = new Namespace("http://api.rest.carbon.wso2.org/xsd");
    var xsi = new Namespace("http://www.w3.org/2001/XMLSchema-instance");

    var containerName = "[ Deployed From Artifact Container: " + carbonApplicationName + " ]";

    var apiArray = response.*::["return"].(ax2482::artifactContainerName == containerName).*::name.text();
    log.info("apiArray " + apiArray);

    for (var i = 0; i < apiArray.length(); i++) {
        log.info("Getting API information for : " + apiArray[i]);

        requestAPIPayload = "<xsd:getApiByName xmlns:xsd=\"http://org.apache.axis2/xsd\">"
                  + "  <xsd:apiName>" + apiArray[i] + "</xsd:apiName>"
                  + "</xsd:getApiByName>";

        var requestAPI = new ws.WSRequest();
        var optionsAPI = new Array();
        optionsAPI.useSOAP = 1.2;
        optionsAPI.action = "urn:getApiByName";
        optionsAPI["HTTPHeaders"] = [{name: "cookie", value: session.get("esb-auth-cookie")}];

        requestAPI.open(optionsAPI, restApiAdminUrl, false);
        requestAPI.send(requestAPIPayload);

        var responseAPI = requestAPI.responseE4X;

        var context = responseAPI.*::["return"].*::context.text();
        var httpMethods = responseAPI.*::["return"].*::resources.*::methods.text();

        var api = new Api();
        api.name = apiArray[i];
        api.context = context;
        api.httpMethods = httpMethods;
        api.url = site.esb.apiBaseURL + context;

        log.info("api : " + api);
        apiList[i] = api;
    }

    log.info("apiList : " + apiList);
    return apiList;

};

%>
