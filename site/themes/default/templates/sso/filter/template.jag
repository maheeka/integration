<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

jagg.template("sso/filter", function(inputs, outputs, jagg) { %>
<%
    var site = require("/site/conf/site.json");
    var security =require("sso");
	var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);
	var sessionId = session.getId();
	var isAuthenticated = ssoRelyingParty.isSessionAuthenticated(sessionId);

    if(jagg.getUser()){
        return;
    }

	var requestURI;
	var requestedPage = request.getParameter("requestedPage");
	if(requestedPage!=null){
	requestURI = requestedPage;
	}else{
	  requestURI = request.getRequestURI();
	  if(request.getQueryString()!=null){
	    requestURI =requestURI+'?'+request.getQueryString();
	  }
	}
	var checkSSO = true;

	if(requestURI.indexOf("register.jag") != -1) {
		checkSSO = false;
	}else if(requestURI.indexOf("confirmemail.jag") != -1) {
		checkSSO = false;
	}
	if (checkSSO && !Boolean(isAuthenticated)) {

	    ssoRelyingParty.setProperty("identityProviderURL", site.ssoConfiguration.identityProviderURL);
	    ssoRelyingParty.setProperty("keyStorePassword", site.ssoConfiguration.keyStorePassword);
	    ssoRelyingParty.setProperty("identityAlias",site.ssoConfiguration.identityAlias);
	    ssoRelyingParty.setProperty("keyStoreName",site.ssoConfiguration.keyStoreName);

	    var samlAuthRequest = ssoRelyingParty.getSAMLAuthRequest();
	    var encodedRequest = ssoRelyingParty.encode(samlAuthRequest);
	    var relayState = ssoRelyingParty.getUUID();
	    ssoRelyingParty.setRelayStateProperty(relayState, requestURI);
	    var idpURL = ssoRelyingParty.getProperty("identityProviderURL");
%>
<div>

	        <p>You are now redirected to Identity. If the

	        redirection fails, please click the post button.</p>

	        <form method="post" action="<%=idpURL%>">

	            <p>

	                <input type="hidden" name="SAMLRequest"

	                value="<%= encodedRequest %>"/>

	                <input type="hidden" name="RelayState" value="<%= relayState %>"/>

	                <input type="hidden" name="SSOAuthSessionID" value="<%= sessionId %>"/>

	                <button type="submit">POST</button>

	            </p>

	        </form>

	    </div>

	    <script type = "text/javascript" >

	           document.forms[0].submit();

	    </script>

<%  }  %>
<% }); %>


